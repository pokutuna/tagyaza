// Generated by CoffeeScript 1.4.0
var Card, Tagyaza;

Tagyaza = {
  init: function() {
    this.cardDiv = $('#cards');
    $('#buttons').on('click', 'button', this.clickButton);
    $('#open-all').on('click', this.openAll);
    $('#reset').on('click', this.reset);
    return $('#output').on('click', this.output);
  },
  cards: [],
  cardDiv: void 0,
  clickButton: function() {
    var dfd, input,
      _this = this;
    dfd = $.Deferred();
    input = $(".set-group." + this.name).find('input');
    input.attr('value', parseInt(input.attr('value'), 10) + 1);
    $.getJSON('/cards.json', {
      set: this.name
    }).success(function(data) {
      var card, card_data, _i, _len, _ref;
      _ref = data.reverse();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card_data = _ref[_i];
        card = new Card(card_data);
        Tagyaza.cards.push(card);
        card.toHtml().prependTo(Tagyaza.cardDiv);
      }
      return dfd.resolve();
    });
    return dfd.promise();
  },
  openAll: function() {
    var btn, buttons, requests;
    buttons = $('button');
    buttons.attr('disabled', true);
    $('#loading').show();
    requests = (function() {
      var _i, _len, _ref, _results;
      _ref = $('#buttons button');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        btn = _ref[_i];
        _results.push(Tagyaza.clickButton.apply(btn));
      }
      return _results;
    })();
    return $.when.apply($, requests).always(function() {
      buttons.removeAttr('disabled');
      return $('#loading').hide();
    });
  },
  reset: function() {
    var ta, _i, _len, _ref, _results;
    if (confirm('リセットしてよろしいですか？')) {
      Tagyaza.cards = [];
      Tagyaza.cardDiv.empty();
      _ref = $('.set-group input');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ta = _ref[_i];
        _results.push($(ta).attr('value', 0));
      }
      return _results;
    }
  },
  output: function() {
    var card, ids;
    ids = (function() {
      var _i, _len, _ref, _results;
      _ref = Tagyaza.cards;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        card = _ref[_i];
        _results.push(card.id);
      }
      return _results;
    })();
    if (ids.length === 0) {
      return;
    }
    $('#output-hidden').val(ids.join(','));
    return $('#output-submit').click();
  }
};

Card = (function() {

  function Card(json) {
    this.id = json.card.id;
    this.set_code = json.card.set_code;
    this.set_no = json.card.set_no;
    this.name_eng = json.card.name_eng;
    this.name_jpn = json.card.name_jpn;
    this.rarelity = Card.rarelity_str_map(json.card.rarelity);
  }

  Card.prototype.toHtml = function() {
    return $('<tr/>').addClass('card').append($('<td/>').text(this.set_code).addClass('code').addClass(this.set_code)).append($('<td/>').text(("000" + this.set_no).slice(-3)).addClass('no')).append($('<td/>').addClass('name').append($('<a/>').text(this.name_jpn).attr('href', this.cardUrl()))).append($('<td/>').text(this.rarelity).addClass('rarelity').addClass(this.rarelity));
  };

  Card.prototype.cardUrl = function() {
    return 'http://whisper.wisdom-guild.net/card/' + this.name_eng.replace(/\s/g, '+');
  };

  Card.rarelity_str_map = function(jpn_text) {
    switch (jpn_text) {
      case '神話レア':
        return 'MR';
      case 'レア':
        return 'R';
      case 'アンコモン':
        return 'UC';
      case 'コモン':
        return 'C';
      default:
        throw new Error("there's no mapping " + jpn_text);
    }
  };

  return Card;

})();

jQuery(function() {
  return Tagyaza.init();
});
